programa_minipar
SEQ
# Dados de entrada XOR e saídas desejadas
input1_0 = 0
input2_0 = 0
output_0 = 0
input1_1 = 0
input2_1 = 1
output_1 = 1
input1_2 = 1
input2_2 = 0
output_2 = 1
input1_3 = 1
input2_3 = 1
output_3 = 0
# Pesos da entrada para camada oculta
w_ih_00 = 1
w_ih_01 = 1
w_ih_02 = 1
w_ih_10 = 1
w_ih_11 = 1
w_ih_12 = 1
# Bias da camada oculta
b_h0 = 1
b_h1 = 1
b_h2 = 1
# Pesos da camada oculta para saída
w_ho_0 = 1
w_ho_1 = 1
w_ho_2 = 1
b_out = 1
# Definir função sigmoide simples: retorna 1 se x >= 1, senão 0
def sig(x) {
  if x >= 1 {
    return 1
  } else {
    return 0
  }
}

# Loop de treinamento simples (somente 1 época demonstrativa)
i = 0
while i < 4 {
  if i == 0 {
    in1 = input1_0
    in2 = input2_0
    expected = output_0
  }
  if i == 1 {
    in1 = input1_1
    in2 = input2_1
    expected = output_1
  }
  if i == 2 {
    in1 = input1_2
    in2 = input2_2
    expected = output_2
  }
  if i == 3 {
    in1 = input1_3
    in2 = input2_3
    expected = output_3
  }
  # Camada oculta
  sum_h0 = in1 * w_ih_00 + in2 * w_ih_10 + b_h0
  sum_h1 = in1 * w_ih_01 + in2 * w_ih_11 + b_h1
  sum_h2 = in1 * w_ih_02 + in2 * w_ih_12 + b_h2
  h0 = sig(sum_h0)
  h1 = sig(sum_h1)
  h2 = sig(sum_h2)
  # Saída
  sum_out = h0 * w_ho_0 + h1 * w_ho_1 + h2 * w_ho_2 + b_out
  out = sig(sum_out)
  print("Entrada:")
  print(in1)
  print(in2)
  print("Esperado:")
  print(expected)
  print("Saída:")
  print(out)
  i = i + 1
}
